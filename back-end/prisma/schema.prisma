// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  name        String
  email       String    @unique
  password    String
  role        Role      @default(USER)
  location    String    // User's address or affected area
  isInNeed    Boolean   @default(false) // Indicates if the user is in need of help
  createdAt   DateTime  @default(now())
  donations   Donation[]
  healthData  HealthData[] // Link to health and sanitation data for users in need
}

model HealthData {
  id            Int       @id @default(autoincrement())
  userId        Int
  user          User      @relation(fields: [userId], references: [id])
  waterAccess   Boolean   // Does the user have access to clean water?
  diseaseRisk   String    // Risk of disease (e.g., cholera, malaria)
  healthNotes   String    // Health-related notes or alerts
  createdAt     DateTime  @default(now())
}


model FloodData {
  id              Int       @id @default(autoincrement())
  region          String    // Region affected by the flood
  severity        String    // Severity level (e.g., low, medium, high)
  details         String    // Detailed information about the flood event
  riskLevel       Float     // Predicted risk level (based on data science model)
  affectedPeople  Int       // Number of people affected in the region
  predictedDate   DateTime  // Date when the flood is predicted to occur
  alerts          Alert[]
  timestamp       DateTime  @default(now())
  resources       Resource[]
}

model Resource {
  id              Int        @id @default(autoincrement())
  type            String     // Type of resource (e.g., food, water, shelter)
  quantity        Int        // Amount of resource
  status          ResourceStatus  @default(PENDING)
  distributedTo   User?      @relation(fields: [userId], references: [id])
  userId          Int?
  floodDataId     Int
  floodData       FloodData  @relation(fields: [floodDataId], references: [id])
  createdAt       DateTime   @default(now())
}

model Alert {
  id              Int       @id @default(autoincrement())
  message         String    // Alert message sent to users
  region          String    // Region where alert is applicable
  floodDataId     Int
  floodData       FloodData @relation(fields: [floodDataId], references: [id])
  createdAt       DateTime  @default(now())
}


model Donation {
  id        Int      @id @default(autoincrement())
  donorName String
  amount    Float
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
}


enum Role {
  USER
  ADMIN
  DONOR // Users who can donate
}

enum ResourceStatus {
  PENDING
  DISTRIBUTED
  IN_TRANSIT
}

