// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int               @id @default(autoincrement())
  name              String
  email             String            @unique
  password          String
  role              Role              @default(USER)
  location          String            // User's address or affected area
  isInNeed          Boolean           @default(false) // Indicates if the user is in need of help
  createdAt         DateTime          @default(now())
  donations         Donation[]
  healthData        HealthData[]      // Link to health and sanitation data for users in need
  resources         Resource[]        // Resources distributed to the user 
  damageAssessments DamageAssessment[] // Link to damage assessments reported by the user
}


model DamageAssessment {
  id                    Int           @id @default(autoincrement())
  floodDataId           Int           // Relates the assessment to specific flood data
  floodData             FloodData     @relation(fields: [floodDataId], references: [id])
  userId                Int?          // Optional: If a regular user submits the assessment
  user                  User?         @relation(fields: [userId], references: [id])
  organizationMemberId  Int?          // Optional: If an organization member submits the assessment
  organizationMember    OrganizationMember? @relation(fields: [organizationMemberId], references: [id])
  severity              String        // Severity level of the damage (e.g., minor, severe, etc.)
  estimatedLoss         Float         // Estimated financial loss due to the damage
  needsAnalysis         String        // Description of the immediate needs (e.g., food, water, shelter)
  additionalNotes       String?       // Any additional comments or observations
  timestamp             DateTime      @default(now())
  createdAt             DateTime      @default(now())
}




model HealthData {
  id               Int        @id @default(autoincrement())
  userId           Int
  user             User       @relation(fields: [userId], references: [id])
  waterAccess      Boolean    // Does the user have access to clean water?
  waterQuality     String?    // Optional: Water quality assessment (e.g., "safe", "contaminated")
  diseaseRisk      String     // Risk of disease (e.g., cholera, malaria)
  healthNotes      String     // Health-related notes or alerts
  sanitationAccess Boolean   // Whether the user has access to proper sanitation
  diseaseOutbreakId Int?      // Optional: Reference to DiseaseOutbreak
  diseaseOutbreak  DiseaseOutbreak? @relation(fields: [diseaseOutbreakId], references: [id])
  
  // Submitter information
  submitterName    String   // Name of the person submitting the data
  submitterEmail   String    // Email of the submitter
  submitterRole    SubmitterRole // Role of the submitter (doctor, nurse, other)

  createdAt        DateTime   @default(now())
}



model DiseaseOutbreak {
  id                Int        @id @default(autoincrement())
  region            String     // Region affected by the outbreak
  disease           String     // Disease name (e.g., cholera, malaria)
  confirmedCases    Int        // Number of confirmed cases
  suspectedCases    Int?       // Optional: Number of suspected cases
  fatalities        Int?       // Optional: Number of fatalities (if any)
  waterContamination Boolean   // Is the outbreak related to water contamination?
  outbreakStatus    String     // Current status (e.g., "active", "contained")
  healthData        HealthData[] // Reverse relation to track all associated HealthData records
  
  // Submitter information
  submitterName     String     // Name of the person submitting the data
  submitterEmail    String     // Email of the submitter
  submitterRole     SubmitterRole // Role of the submitter (doctor, nurse, other)

  timestamp         DateTime   @default(now())
  createdAt         DateTime   @default(now())
}




model FloodData {
  id                Int               @id @default(autoincrement())
  region            String            // Region affected by the flood
  severity          String            // Severity level (e.g., low, medium, high)
  details           String            // Detailed information about the flood event
  riskLevel         Float             // Predicted risk level (based on data science model)
  affectedPeople    Int               // Number of people affected in the region
  predictedDate     DateTime          // Date when the flood is predicted to occur
  alerts            Alert[]
  timestamp         DateTime          @default(now())
  resources         Resource[]
  damageAssessments DamageAssessment[] // Link to the damage assessments for this flood
}


model Resource {
  id                    Int        @id @default(autoincrement())
  type                  String     // Type of resource (e.g., food, water, shelter)
  quantity              Int        // Amount of resource
  status                ResourceStatus  @default(PENDING)
  distributedTo         User?      @relation(fields: [userId], references: [id])
  userId                Int?
  floodDataId           Int
  floodData             FloodData  @relation(fields: [floodDataId], references: [id])
  communityResilienceId Int?       // Optional relation to CommunityResilience
  communityResilience   CommunityResilience? @relation(fields: [communityResilienceId], references: [id])
  organizationId        Int?       // Optional relation to the organization distributing the resource
  organization          Organization? @relation(fields: [organizationId], references: [id])
  createdAt             DateTime   @default(now())
}



model Alert {
  id              Int       @id @default(autoincrement())
  message         String    // Alert message sent to users
  region          String    // Region where alert is applicable
  floodDataId     Int
  floodData       FloodData @relation(fields: [floodDataId], references: [id])
  createdAt       DateTime  @default(now())
}


model Donation {
  id        Int      @id @default(autoincrement())
  donorName String
  amount    Float
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
}

model CommunityResilience {
  id            Int       @id @default(autoincrement())
  region        String    // Community region
  recoveryPlans String    // Plans for long-term recovery
  resources     Resource[] // Resources allocated to the community for recovery
  createdAt     DateTime  @default(now()) 
}

model Organization {
  id          Int                   @id @default(autoincrement())
  name        String                // Name of the organization
  contactInfo String                // Contact information of the organization
  location    String                // Organization's location or operational area
  resources   Resource[]            // Resources distributed by the organization
  members     OrganizationMember[]  // Members (organizers) of the organization
  createdAt   DateTime              @default(now())
}

model OrganizationMember {
  id              Int                @id @default(autoincrement())
  name            String             // Name of the organization member
  email           String             @unique // Unique email for the organizer login
  password        String             // Password for the member to log in
  role            MemberRole         // Define the role within the organization (e.g., ORGANIZER, MANAGER, etc.)
  organizationId  Int                // Link to the organization
  organization    Organization       @relation(fields: [organizationId], references: [id])
  damageAssessments DamageAssessment[] // Reverse relation to track damage assessments submitted by this member
  createdAt       DateTime           @default(now())
}


enum MemberRole {
  ORGANIZER
  MANAGER
  VOLUNTEER
}

enum Role {
  USER
  ADMIN
  DONOR // Users who can donate
}

enum SubmitterRole {
  DOCTOR
  NURSE
  OTHER
}

enum ResourceStatus {
  PENDING
  DISTRIBUTED
  IN_TRANSIT
}

