// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  name               String
  email              String               @unique
  password           String
  role               Role                 @default(USER)
  location           String // User's address or affected area
  isInNeed           Boolean              @default(false) // Indicates if the user is in need of help
  privacyAgreement  Boolean   @default(false) // Track if the user has agreed to privacy terms
  createdAt          DateTime             @default(now())
  donations          Donation[]
  healthData         HealthData[] // Link to health and sanitation data for users in need
  resources          Resource[] // Resources distributed to the user 
  damageAssessments  DamageAssessment[] // Link to damage assessments reported by the user
  UserPreference     UserPreference?
  Feedback           Feedback[]
  APILog             APILog[]
  SubmittedEmergency SubmittedEmergency[]
  UserConsent        UserConsent?
}

model UserConsent {
  id           Int         @id @default(autoincrement())
  userId       Int         @unique
  user         User        @relation(fields: [userId], references: [id]) //Who submitted or recorded the consent
  consentGiven Boolean     @default(false) // Whether consent is given for using sensitive data
  consentDate  DateTime    @default(now()) // Date when consent was given
  consentType  ConsentType // Enum for types of consent (general, health-related, etc.)
  consentInfo     String?
  cancelledAt  DateTime? // Optional: If consent was cancelled, store the date
  createdAt    DateTime    @default(now())
}

enum ConsentType {
  GENERAL
  HEALTH_DATA
  LOCATION_DATA
}

model UserPreference {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  notificationMethod NotificationMethod // Enum for better consistency (email, SMS, app notification)
  alertFrequency     AlertFrequency // Enum for frequency (immediate, daily, weekly)
  preferredLanguage  Language // Preferred language for notifications
  alertType          AlertType[] // A list of specific types of alerts they want to receive (e.g., flood, disease outbreaks)
  createdAt          DateTime           @default(now())
}

enum Language {
  ENGLISH
  Burmese
  FRENCH
  SPANISH
}

enum NotificationMethod {
  EMAIL
  SMS
  APP_NOTIFICATION
}

enum AlertFrequency {
  IMMEDIATE
  DAILY
  WEEKLY
}

enum AlertType {
  FLOOD_ALERT
  DISEASE_OUTBREAK
  RESOURCE_DISTRIBUTION
}

model DamageAssessment {
  id                   Int                 @id @default(autoincrement())
  floodDataId          Int // Relates the assessment to specific flood data
  floodData            FloodData           @relation(fields: [floodDataId], references: [id])
  userId               Int? // Optional: If a regular user submits the assessment
  user                 User?               @relation(fields: [userId], references: [id])
  organizationMemberId Int? // Optional: If an organization member submits the assessment
  organizationMember   OrganizationMember? @relation(fields: [organizationMemberId], references: [id])
  severity             String // Severity level of the damage (e.g., minor, severe, etc.)
  estimatedLoss        Float // Estimated financial loss due to the damage
  needsAnalysis        String // Description of the immediate needs (e.g., food, water, shelter)
  additionalNotes      String? // Any additional comments or observations
  timestamp            DateTime            @default(now())
  createdAt            DateTime            @default(now())
}

model HealthData {
  id                Int              @id @default(autoincrement())
  userId            Int
  user              User             @relation(fields: [userId], references: [id])
  waterAccess       Boolean // Does the user have access to clean water?
  waterQuality      String? // Optional: Water quality assessment (e.g., "safe", "contaminated")
  diseaseRisk       String // Risk of disease (e.g., cholera, malaria)
  healthNotes       String // Health-related notes or alerts
  sanitationAccess  Boolean // Whether the user has access to proper sanitation
  diseaseOutbreakId Int? // Optional: Reference to DiseaseOutbreak
  diseaseOutbreak   DiseaseOutbreak? @relation(fields: [diseaseOutbreakId], references: [id])

  // Submitter information
  submitterName  String // Name of the person submitting the data
  submitterEmail String // Email of the submitter
  submitterRole  SubmitterRole // Role of the submitter (doctor, nurse, other)
  consentGranted    Boolean  // Whether the user has consented to use health data

  // Additional fields for tracking updates
  fetchedAt DateTime? // Time when data was fetched from an API (optional for api submission)
  timestamp DateTime  @default(now()) // Time of submission
  createdAt DateTime @default(now())
}

model DiseaseOutbreak {
  id                 Int     @id @default(autoincrement())
  region             String // Region affected by the outbreak
  disease            String // Disease name (e.g., cholera, malaria)
  confirmedCases     Int // Number of confirmed cases
  suspectedCases     Int? // Optional: Number of suspected cases
  fatalities         Int? // Optional: Number of fatalities (if any)
  hospitalizations   Int? // Optional: Number of hospitalizations due to the outbreak
  recovered          Int? // Optional: Number of recovered cases
  criticalCondition  Int? // Optional: Number of people in critical condition
  vaccinationData    String? // Optional: Vaccination data related to the outbreak (e.g., percent vaccinated)
  newCases           Int? // Optional: New cases reported since the last update
  waterContamination Boolean // Is the outbreak related to water contamination?
  outbreakStatus     String // Current status (e.g., "active", "contained", "ongoing")
  apiSource          String? // Optional: External API source (e.g., "WHO", "CDC")

  // Submitter information
  submitterName  String // Name of the person submitting the data
  submitterEmail String // Email of the submitter
  submitterRole  SubmitterRole // Role of the submitter (doctor, nurse, other)

  // Additional fields for tracking updates
  fetchedAt DateTime? // Time when data was fetched from an API (optional for manual submission)
  timestamp DateTime  @default(now()) // Time of submission
  createdAt DateTime  @default(now())

  healthData HealthData[] // Relation to additional health stats data, such as detailed trends
}

model FloodData {
  id                  Int                   @id @default(autoincrement())
  region              String // Region affected by the flood
  severity            String // Severity level (e.g., low, medium, high)
  details             String // Detailed information about the flood event
  riskLevel           Float // Predicted risk level (based on data science model)
  affectedPeople      Int // Number of people affected in the region
  predictedDate       DateTime // Date when the flood is predicted to occur
  alerts              Alert[]
  timestamp           DateTime              @default(now())
  resources           Resource[]
  damageAssessments   DamageAssessment[] // Link to the damage assessments for this flood
  historicalFloodData HistoricalFloodData[]
  task                Task[]
  createdAt           DateTime              @default(now())
  WeatherData         WeatherData[]
  MapData             MapData[]
}

model WeatherData {
  id             Int        @id @default(autoincrement())
  region         String // The region for which weather data is fetched
  temperature    Float // Current temperature
  humidity       Float // Current humidity level
  rainfall       Float // Rainfall amount in mm
  windSpeed      Float // Wind speed in km/h
  forecast       String // Weather forecast description
  fetchedAt      DateTime   @default(now()) // Time when the data was fetched
  floodRiskLevel Float // Calculated flood risk based on weather data (e.g., risk score)
  floodDataId    Int? // Optional: Link to related flood data
  floodData      FloodData? @relation(fields: [floodDataId], references: [id])
  apiSource      String // The API source used (e.g., "OpenWeatherMap")
}

model HistoricalFloodData {
  id             Int        @id @default(autoincrement())
  region         String // Region for the historical flood data
  year           Int // Year of the flood event
  severity       String // Severity level of past flood events
  affectedPeople Int // Number of people affected
  floodDataId    Int?
  floodData      FloodData? @relation(fields: [floodDataId], references: [id])
}

model MapData {
  id          Int        @id @default(autoincrement())
  region      String // Name of the region or coordinates
  mapUrl      String // URL for the map (generated by external API)for visualizing the affected regions.
  coordinates String // GPS coordinates for the location
  floodDataId Int? // Optional: Link to flood data to show on the map
  floodData   FloodData? @relation(fields: [floodDataId], references: [id])
  zoomLevel   Int        @default(10) // Zoom level for the map display(For controlling the scale at which the map is shown.)
  createdAt   DateTime   @default(now())
  apiSource   String // The API source (e.g., "Google Maps", "Mapbox")
}

model Resource {
  id                      Int                    @id @default(autoincrement())
  type                    String // Type of resource (e.g., food, water, shelter)
  quantity                Int // Amount of resource
  status                  ResourceStatus         @default(PENDING)
  priorityLevel           PriorityLevel // New: Level of priority for resource allocation
  distributedTo           User?                  @relation(fields: [userId], references: [id])
  userId                  Int?
  floodDataId             Int
  floodData               FloodData              @relation(fields: [floodDataId], references: [id])
  communityResilienceId   Int? // Optional relation to CommunityResilience
  communityResilience     CommunityResilience?   @relation(fields: [communityResilienceId], references: [id])
  organizationId          Int? // Optional relation to the organization distributing the resource
  organization            Organization?          @relation(fields: [organizationId], references: [id])
  createdAt               DateTime               @default(now())
  Feedback                Feedback[]
  EmergencyResponsePlan   EmergencyResponsePlan? @relation(fields: [emergencyResponsePlanId], references: [id])
  emergencyResponsePlanId Int?
}

enum PriorityLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model Alert {
  id          Int         @id @default(autoincrement())
  message     String // Alert message sent to users
  region      String // Region where alert is applicable
  floodDataId Int
  floodData   FloodData   @relation(fields: [floodDataId], references: [id])
  status      AlertStatus @default(PENDING) // Status of the alert: sent, failed, etc.
  createdAt   DateTime    @default(now())
}

model Donation {
  id           Int      @id @default(autoincrement())
  donorName    String // Name of the donor
  amount       Float // Donation amount
  userId       Int // Recipient user (if applicable)
  user         User     @relation(fields: [userId], references: [id])
  purpose      String // Purpose of the donation (e.g., clean water, food, shelter)
  impactReport String? // Optional: Report back to the donor on how the donation helped
  createdAt    DateTime @default(now())
}

model CommunityResilience {
  id            Int        @id @default(autoincrement())
  region        String // Community region
  recoveryPlans String // Plans for long-term recovery
  resources     Resource[] // Resources allocated to the community for recovery
  createdAt     DateTime   @default(now())
}

model Organization {
  id                    Int                     @id @default(autoincrement())
  name                  String // Name of the organization
  contactInfo           String // Contact information of the organization
  location              String // Organization's location or operational area
  resources             Resource[] // Resources distributed by the organization
  members               OrganizationMember[] // Members (organizers) of the organization
  highLevelOrgId        Int? // Optional link to the high-level organization
  highLevelOrg          HighLevelOrganization?  @relation(fields: [highLevelOrgId], references: [id])
  createdAt             DateTime                @default(now())
  Report                Report[]
  EmergencyResponsePlan EmergencyResponsePlan[]
  OrganizationResponse  OrganizationResponse[]
}

model OrganizationMember {
  id                Int                @id @default(autoincrement())
  name              String // Name of the organization member
  email             String             @unique // Unique email for the organizer login
  password          String // Password for the member to log in
  role              MemberRole // Define the role within the organization (e.g., ORGANIZER, MANAGER, etc.)
  organizationId    Int // Link to the organization
  organization      Organization       @relation(fields: [organizationId], references: [id])
  damageAssessments DamageAssessment[] // Reverse relation to track damage assessments submitted by this member
  createdAt         DateTime           @default(now())
}

model Report {
  id             Int           @id @default(autoincrement())
  reportType     ReportType // Type of report (e.g., damage, resource distribution, disease outbreak)
  generatedBy    Organization? @relation(fields: [organizationId], references: [id]) // Organization that generated the report
  data           Json // Report data in JSON format
  createdAt      DateTime      @default(now())
  organizationId Int?
}

enum ReportType {
  DAMAGE_ASSESSMENT
  RESOURCE_DISTRIBUTION
  HEALTH_MONITORING
  DISEASE_OUTBREAK
}

model Volunteer {
  id            Int           @id @default(autoincrement())
  name          String // Name of the volunteer
  email         String        @unique // Contact info
  role          VolunteerRole // Role of the volunteer (e.g., medical, logistics)
  availability  Boolean       @default(true) // Availability of the volunteer
  assignedTasks Task[] // Tasks assigned to the volunteer
  createdAt     DateTime      @default(now())
}

enum VolunteerRole {
  MEDICAL
  LOGISTICS
  GENERAL
}

model Task {
  id          Int        @id @default(autoincrement())
  description String // Task description
  floodDataId Int? // Related flood event (if applicable)
  floodData   FloodData? @relation(fields: [floodDataId], references: [id])
  assignedTo  Volunteer? @relation(fields: [volunteerId], references: [id]) // Volunteer assigned to the task
  status      TaskStatus @default(PENDING) // Task status
  createdAt   DateTime   @default(now())
  volunteerId Int?
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model HighLevelOrganization {
  id              Int             @id @default(autoincrement())
  name            String // Ministry or high-level authority name
  contactInfo     String // Contact info for communication
  region          String? // Operating region
  decisionMakers  DecisionMaker[] // High-level decision makers (e.g., ministers)
  subordinateOrgs Organization[] // Subordinate organizations (hospitals, NGOs, etc.)
  createdAt       DateTime        @default(now())
}

model DecisionMaker {
  id             Int                    @id @default(autoincrement())
  name           String // Decision maker's name
  email          String                 @unique
  role           String // Role or title (e.g., Minister of Health)
  highLevelOrgId Int? // Reference to the high-level organization
  highLevelOrg   HighLevelOrganization? @relation(fields: [highLevelOrgId], references: [id])
  orders         Order[] // Orders issued by this decision maker
  createdAt      DateTime               @default(now())
}

model Visualization {
  id          Int               @id @default(autoincrement())
  title       String // Title of the visualization
  description String // Description of the data being visualized
  type        VisualizationType // Type of visualization (e.g., bar chart, map, etc.)
  data        Json // JSON data for rendering the visualization
  createdAt   DateTime          @default(now())
}

enum VisualizationType {
  MAP
  CHART
  TABLE
}

model Order {
  id              Int           @id @default(autoincrement())
  decisionMakerId Int // Reference to the decision-maker issuing the order
  decisionMaker   DecisionMaker @relation(fields: [decisionMakerId], references: [id])
  targetType      TargetType // Who is the order targeted to? (e.g., doctor, organization, donor)
  targetId        Int // ID of the target (could be a doctor, organization, or donor)
  message         String // Content of the order
  status          OrderStatus   @default(PENDING) // Status of the order (e.g., pending, in progress, done)
  startDate       DateTime? // Optional: When the order was started
  completionDate  DateTime? // Optional: When the order was completed
  notes           String? // Optional: Any additional notes regarding the order
  createdAt       DateTime      @default(now())
}

enum OrderStatus {
  PENDING // The order has been issued but not yet started
  IN_PROGRESS // The order is currently being worked on
  DONE // The order has been completed
  CANCELLED // The order was cancelled and is no longer active
}

enum TargetType {
  DOCTOR //  Decision-makers can send specific health-related orders or instructions directly to medical staff 
  NURSE
  ORGANIZER // They can assign resource distribution tasks to different organizational roles
  MANAGER
  VOLUNTEER
  USER // They can send alerts or requests for donations, updates, or emergency help to individual users or donors (e.g., during a flood or crisis).
  DONOR
  ADMIN // the decision-maker can also assign high-level administrative tasks or issue policy-level orders to app admins.
  OTHER // From SubmitterRole (catch-all for any other roles)
}

model Feedback {
  id            Int            @id @default(autoincrement())
  userId        Int
  user          User           @relation(fields: [userId], references: [id])
  feedbackType  FeedbackType // E.g., RESOURCE, GENERAL  
  resourceId    Int?
  resource      Resource?      @relation(fields: [resourceId], references: [id])
  rating        Int // E.g., 1 to 5 stars  
  comments      String? // Optional comments  
  isAnonymous   Boolean        @default(false) //Allow users to submit feedback anonymously.
  status        FeedbackStatus @default(PENDING) //To track whether feedback has been reviewed or acted upon (e.g., acknowledged, under review).
  adminResponse String? // Optional admin response  
  respondedAt   DateTime? // When response was provided  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt //Track when feedback was updated.
}

enum FeedbackType {
  RESOURCE
  GENERAL
}

enum FeedbackStatus {
  PENDING
  ACKNOWLEDGED
  UNDER_REVIEW
  RESOLVED
}

enum MemberRole {
  ORGANIZER
  MANAGER
  VOLUNTEER
}

enum Role {
  USER
  ADMIN
  DONOR // Users who can donate
}

enum SubmitterRole {
  DOCTOR
  NURSE
  OTHER
}

enum ResourceStatus {
  PENDING
  DISTRIBUTED
  IN_TRANSIT
}

enum AlertStatus {
  PENDING
  SENT
  FAILED
}

model APILog {
  id             Int      @id @default(autoincrement())
  apiName        String // Name of the API (e.g., "OpenWeatherMap", "Google Maps")
  endpoint       String // API endpoint used
  responseCode   Int // HTTP response code from the API
  responseTime   Int // Time taken for the API to respond (in ms)
  requestPayload String? // Optional: Payload sent to the API (for debugging)
  errorMessage   String? // Optional: Any error message returned from the API
  retries        Int? // Number of times this API call was retried
  createdAt      DateTime @default(now())

  // Optional: Link API logs to a specific user action
  userId Int? // Foreign key to User model (optional)
  user   User? @relation(fields: [userId], references: [id])
}

model EmergencyResponsePlan {
  id                   Int                  @id @default(autoincrement())
  region               String // Region for the plan  
  planDetails          String // Description of the plan  
  emergencyType        EmergencyType // Type of emergency (e.g., flood, earthquake, disease outbreak)
  resourcesNeeded      Resource[] // Resources allocated for the plan  
  responsibleOrgId     Int? // Organization responsible for executing the plan
  responsibleOrg       Organization?        @relation(fields: [responsibleOrgId], references: [id])
  contactPerson        String // Contact person for coordination
  contactEmail         String // Contact person's email
  status               PlanStatus           @default(PENDING) // Status of the plan (e.g., pending, active, completed)
  timeline             DateTime? // Optional: Expected timeline for plan execution
  riskLevel            RiskLevel? // Optional: Risk level (e.g., high, medium, low)
  priority             PriorityLevelER? // Optional: Priority level of the plan (e.g., 1 for high priority)
  createdAt            DateTime             @default(now())
  submittedEmergencies SubmittedEmergency[] // Emergencies linked to this plan
}

model SubmittedEmergency {
  id                   Int                    @id @default(autoincrement())
  region               String // Region where the emergency was reported
  emergencyType        EmergencyType // Type of emergency being reported
  description          String // Detailed description of the emergency
  submitterId          Int // User submitting the emergency
  submitter            User                   @relation(fields: [submitterId], references: [id])
  submissionStatus     SubmissionStatus       @default(PENDING) // Status of the submitted emergency
  createdAt            DateTime               @default(now())
  associatedPlanId     Int? // Link to an EmergencyResponsePlan if associated
  associatedPlan       EmergencyResponsePlan? @relation(fields: [associatedPlanId], references: [id])
  OrganizationResponse OrganizationResponse[]
}

model OrganizationResponse {
  id              Int                @id @default(autoincrement())
  organizationId  Int // Organization responding to the emergency
  organization    Organization       @relation(fields: [organizationId], references: [id])
  emergencyId     Int // Emergency being responded to
  emergency       SubmittedEmergency @relation(fields: [emergencyId], references: [id])
  responseDetails String // Details of the organization's response
  responseStatus  ResponseStatus     @default(PENDING) // Status of the response
  createdAt       DateTime           @default(now())
}

// Enums for better usability
enum EmergencyType {
  FLOOD
  EARTHQUAKE
  DISEASE_OUTBREAK
  FIRE
  OTHER
}

enum PlanStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum SubmissionStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
}

enum ResponseStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
}

enum PriorityLevelER {
  LOW
  MEDIUM
  HIGH
}
